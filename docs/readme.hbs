[![Build Status](https://travis-ci.org/skarfacegc/Gue.svg?branch=master)](https://travis-ci.org/skarfacegc/Gue) [![Coverage Status](https://coveralls.io/repos/github/skarfacegc/Gue/badge.svg)](https://coveralls.io/github/skarfacegc/Gue) [![dependencies Status](https://david-dm.org/skarfacegc/Gue/status.svg)](https://david-dm.org/skarfacegc/Gue)


[![NPM](https://nodei.co/npm/gue.png?downloads=true)](https://nodei.co/npm/gue/)

- [CLI Documentation](#CLI)
- [API Documentation](#Gue)

Gue (_pronounced goo_) is yet another task runner. It is focused on making it
easy to run the shell commands that are documented with your toolchain of
choice. Gue is a thin wrapper on
[orchestrator](https://www.npmjs.com/package/orchestrator) with a fancy shell
command method and some built in logging.

### Motivation
A recent change to a plugin I used in another task runner broke my code coverage
task. This caused me to start looking at alternatives. The one that made the
most sense was to just use npm scripts, since the command line examples
in the tools I use normally work pretty well.

Npm scripts, while easy to use, did not lend themselves to code re-use. If I
want to perform the same steps on different sets of files
(generate code coverage for just client files for example) I would have to
duplicate code. I realized what I wanted was a programatic way to setup
shell calls along with the same task chaining I got used to in other task
runners.

## Documentation
<a name='CLI'></a>
### CLI


The gue CLI looks for ```guefile.js``` at the project root.  All tasks defined
in the guefile are run relative to the project root (where your package.json
lives).  The time taken by each task is logged when the task finishes.  Gue will
exit with 1 if any of the tasks fail.

You can install gue globally with ```npm install -g gue``` and locally with
```npm install --save-deps gue```.  The global ```gue``` command will use the
version of gue in the local ```node_modules``` if available.
```shell
# run the task named 'default'
% gue

# Run the coverage task
% gue coverage

# Run the coverage task then the lint task
% gue coverage lint

# List the tasks defined in guefile.js
% gue -l
```

#### guefile.js example

[Gue-test](https://github.com/skarfacegc/Gue-test) is a sample project using Gue.

```javascript
// sample guefile.js
const gue = require('gue');

// Set the value for 'files'
gue.setOption('testFiles', 'test/**/*.test.js');

// Set the default task
gue.task('default', ['coverage','fail']);

// Run code coverage using files as specified by
// setOption above
gue.task('coverage', () => {
  return gue.shell('nyc mocha \{{testFiles}}');
});

// This task will fail
gue.task('fail', () => {
  return gue.shell('typo');
});
```
This will generate output as shown below

![Run Example](http://i.imgur.com/f8J5toD.png?1)
<!-- jsdoc2md gets inserted below -->
{{>main}}
